<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-08-27T23:03:54+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker容器]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/08/12/shangyajunblog_docker_2/"/>
    <updated>2018-08-12T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/08/12/shangyajunblog_docker_2</id>
    <content type="html"><![CDATA[<h1>Docker容器</h1>

<hr />

<h2>1. 容器的基本操作</h2>

<h4>启动容器docker</h4>

<pre><code>run [OPTIONS] IMAGE [COMMAND] [ARG...]
</code></pre>

<h4>一次启动运行一次的容器，是docker中最基本的命令，运行完就结束</h4>

<pre><code>sudo docker run ubuntu echo 'hello world!'
</code></pre>

<h4>启动交互式容器：</h4>

<pre><code>sudo docker run -i-t IMAGE /bin/bash
-i 为容器提供标准的输入
-t 为容器提供一个tty终端
</code></pre>

<h4>查看我们创建的容器，和以前使用过的容器</h4>

<pre><code>sudo docker ps [-a][-l]
-a  -all 列出所有的容器
-l  列出最新创建的容器

sudo docker inspect [name|id] 可以查看指定docker的配置信息
</code></pre>

<h4>创建自己名称docker容器</h4>

<pre><code>sudo docker run --name=[name] ubuntu echo 'hello world!'
</code></pre>

<h4>重新启动停止的容器：</h4>

<pre><code>sudo docker start [-i] 容器名
-i 表示重新启动停止的容器
</code></pre>

<h4>删除不需要的容器(删除停止的容器，不能删除运行中的容器)</h4>

<pre><code>sudo docker rm 容器名
</code></pre>

<hr />

<h2>2. 守护式容器</h2>

<h4>什么是守护式容器？在我们一开始创建了容器后，都是执行完命令后就容器停止了运行。但是守护式容器，不一样！！！！</h4>

<ol>
<li>能够长期运行</li>
<li>没有交互式会话</li>
<li>适合运行应用程序和服务</li>
</ol>


<h4>如何运行守护式容器呢？</h4>

<pre><code>sudo docker run -i -t ubuntu /bin/bash
使用ctrl+q或ctrl+p退出容器后，容器就会在后台运行
</code></pre>

<h4>那么怎么再次进入运行在后台的容器呢？</h4>

<pre><code>sudo docker attach [容器名]
</code></pre>

<h4>启动守护式容器：</h4>

<pre><code>sudo docker run -d IMAGE [COMMAND] [ARG...]
</code></pre>

<h4>查看容器的日志</h4>

<pre><code>docker logs [-f] [-t] [--tail] 容器名
-f --follows=true|false 默认false 跟踪：一直更新日志
-t --timestamps=true|false 默认false 显示时间戳
--tail='all' 只显示最新的
</code></pre>

<h4>查看容器中的进程</h4>

<pre><code>docker top 容器名
</code></pre>

<h4>在运行中的容器中启动新的进程</h4>

<pre><code>sudo docker exec [-d][-i][-t] 容器名[COMMAND] [ARG...]
sudo docker exec -i -d 容器名 /bin/bash
</code></pre>

<h4>停止守护式容器</h4>

<pre><code>docker stop 容器名  发送一个停止的信号给容器，等待容器停止
docker kill 容器名  直接停止容器，不用等待
</code></pre>

<hr />

<h2>3. 在容器中部署静态网站</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker安装]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/08/12/shangyajunblog_docker_1/"/>
    <updated>2018-08-12T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/08/12/shangyajunblog_docker_1</id>
    <content type="html"><![CDATA[<h1>Docker安装</h1>

<hr />

<h2>1. 私有环境安装docker</h2>

<hr />

<h2>2. 公有环境安装docker</h2>

<h4>安装前的检查：</h4>

<h5>1.内核的检查</h5>

<pre><code>uname -a
</code></pre>

<h5>2.检查Device Mapper的检查</h5>

<pre><code>ls -l /sys/class/misc/device-mapper
</code></pre>

<h4>安装docker维护的版本</h4>

<h5>1.检查APT的HTTPS支持查看文件是否存在</h5>

<pre><code>/usr/lib/apt/methods/https
</code></pre>

<h5>不存在：</h5>

<pre><code>apt-get update
pat-get install -y apt-transport-https
</code></pre>

<h5>2.添加Docker的APT仓库</h5>

<pre><code>echo deb https://getdocker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list
</code></pre>

<h5>3. 添加仓库的key</h5>

<pre><code>apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 
</code></pre>

<h5>4. 安装</h5>

<pre><code>apt-get update
apt-get install -y lxc-docker
</code></pre>

<h2>安装简易的命令：</h2>

<pre><code>sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
</code></pre>

<hr />

<h2>3. 配置国内镜像仓库</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker介绍]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_Docker/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_Docker</id>
    <content type="html"><![CDATA[<h1>Docker是什么？</h1>

<h5>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</h5>

<h4>docker就是类似的理念。现在都流行云计算了，云计算就好比大货轮。docker就是集装箱。</h4>

<h4>1.不同的应用程序可能会有不同的应用环境，比如.net开发的网站和php开发的网站依赖的软件就不一样，如果把他们依赖的软件都安装在一个服务器上就要调试很久，而且很麻烦，还会造成一些冲突。比如IIS和Apache访问端口冲突。这个时候你就要隔离.net开发的网站和php开发的网站。常规来讲，我们可以在服务器上创建不同的虚拟机在不同的虚拟机上放置不同的应用，但是虚拟机开销比较高。docker可以实现虚拟机隔离应用环境的功能，并且开销比虚拟机小，小就意味着省钱了。</h4>

<h4>2.你开发软件的时候用的是Ubuntu，但是运维管理的都是centos，运维在把你的软件从开发环境转移到生产环境的时候就会遇到一些Ubuntu转centos的问题，比如：有个特殊版本的数据库，只有Ubuntu支持，centos不支持，在转移的过程当中运维就得想办法解决这样的问题。这时候要是有docker你就可以把开发环境直接封装转移给运维，运维直接部署你给他的docker就可以了。而且部署速度快。</h4>

<h5>3.在服务器负载方面，如果你单独开一个虚拟机，那么虚拟机会占用空闲内存的，docker部署的话，这些内存就会利用起来。</h5>

<hr />

<h1>用Docker能做什么？</h1>

<ul>
<li><p>Web 应用的自动化打包和发布。</p></li>
<li><p>自动化测试和持续集成、发布。</p></li>
<li><p>在服务型环境中部署和调整数据库或其他的后台应用。</p></li>
<li><p>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</p></li>
</ul>


<hr />

<h1>用Docker的优点？</h1>

<h3>1、简化程序：</h3>

<h4>Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的    任务，在Docker容器的处理下，只需要数秒就能完成。</h4>

<h3>2、避免选择恐惧症：</h3>

<h4>如果你有选择恐惧症，还是资深患者。Docker 帮你    打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。</h4>

<h3>3、节省开支：</h3>

<h4>一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。</h4>
]]></content>
  </entry>
  
</feed>
