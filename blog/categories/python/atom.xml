<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-08-27T23:03:54+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django-Django全文搜索]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_2/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_2</id>
    <content type="html"><![CDATA[<h1>Django-Django全文搜索haystack</h1>

<h4>haystack官网：<a href="http://django-haystack.readthedocs.io/en/master/">http://django-haystack.readthedocs.io/en/master/</a></h4>

<h1>使用的工具</h1>

<ul>
<li>haystack是django的开源搜索框架，该框架支持Solr, Elasticsearch, Whoosh, Xapian搜索引擎，不用更改代码，直接切换引擎，减少代码量。</li>
<li>搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小巧，配置比较简单，当然性能自然略低。</li>
<li>中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换whoosh的分词组件。

<h1>配置说明</h1>

<h6>现在假设我们的项目叫做Project,有一个myapp的app，简略的目录结构如下。</h6>

<h3>此models.py的内容假设如下：</h3>

<pre><code>from django.db import models
from django.contrib.auth.models import User
class Note(models.Model):
  user = models.ForeignKey(User)
  pub_date = models.DateTimeField()
  title = models.CharField(max_length=200)
  body = models.TextField()
  def __str__(self):
      return self.title
</code></pre></li>
</ul>


<h2>1.首先安装各工具</h2>

<pre><code>pip install whoosh django-haystack jieba
</code></pre>

<h2>2.添加 Haystack 到Django的 INSTALLED_APPS</h2>

<pre><code>INSTALLED_APPS = [ 
        'django.contrib.admin',
        'django.contrib.auth', 
        'django.contrib.contenttypes', 
        'django.contrib.sessions', 
        'django.contrib.sites',
          # Added. haystack先添加，
          'haystack', 
          # Then your usual apps... 自己的app要写在haystakc后面
          'blog',
]
</code></pre>

<h2>3.修改 你的 settings.py，以配置引擎</h2>

<pre><code>HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}
</code></pre>

<h6>其中顾名思义，ENGINE为使用的引擎必须要有，如果引擎是Whoosh，则PATH必须要填写，其为Whoosh 索引文件的存放文件夹。其他引擎的配置见官方文档<a href="http://django-haystack.readthedocs.io/en/master/">http://django-haystack.readthedocs.io/en/master/</a></h6>

<h2>4.创建索引</h2>

<h6>如果你想针对某个app例如mainapp做全文检索，则必须在mainapp的目录下面建立search_indexes.py文件，文件名不能修改。内容如下：</h6>

<pre><code>import datetime
from haystack import indexes
from myapp.models import Note
class NoteIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    author = indexes.CharField(model_attr='user')
    pub_date = indexes.DateTimeField(model_attr='pub_date')
    def get_model(self):
        return Note
    def index_queryset(self, using=None):
        """Used when the entire index for model is updated."""
        return self.get_model().objects.filter(pub_date__lte=datetime.datetime.now())
</code></pre>

<h6>每个索引里面必须有且只能有一个字段为document=True，这代表haystack 和搜索引擎将使用此字段的内容作为索引进行检索(primary field)。其他的字段只是附属的属性，方便调用，并不作为检索数据。</h6>

<h6>注意：如果使用一个字段设置了document=True，则一般约定此字段名为text，这是在SearchIndex类里面一贯的命名，以防止后台混乱，当然名字你也可以随便改，不过不建议改。</h6>

<h6>并且，haystack提供了use_template=True在text字段，这样就允许我们使用数据模板去建立搜索引擎索引的文件，使用方便（官方推荐，当然还有其他复杂的建立索引文件的方式，目前我还不知道），数据模板的路径为yourapp/templates/search/indexes/yourapp/note_text.txt，例如本例子为blog/templates/search/indexes/blog/note_text.txt文件名必须为要索引的类名_text.txt,其内容为</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class=''></code></pre></td></tr></table></div></figure></p>

<h6>这个数据模板的作用是对Note.title, Note.user.get_full_name,Note.body这三个字段建立索引，当检索的时候会对这三个字段做全文检索匹配。</h6>

<h3>在urls.py中配置如下url信息，当然url路由可以随意写。</h3>

<pre><code>(r'^search/', include('haystack.urls')),
</code></pre>

<h6>其实haystack.urls的内容为，</h6>

<pre><code>from django.conf.urls import url
from haystack.views import SearchView
urlpatterns = [
    url(r'^$', SearchView(), name='haystack_search'),
]
</code></pre>

<h6>SearchView()视图函数默认使用的html模板为当前app目录下，路径为myapp/templates/search/search.html</h6>

<h6>所以需要在blog/templates/search/下添加search.html文件，自带了分页,内容为</h6>

<h6><a href="http://django-haystack.readthedocs.io/en/master/tutorial.html#handling-data">http://django-haystack.readthedocs.io/en/master/tutorial.html#handling-data</a></h6>

<h2>5.重建索引文件</h2>

<h3>使用python manage.py rebuild_index或者使用update_index命令。</h3>

<h2>6. 使用jieba分词</h2>

<h6># 1.将文件whoosh_backend.py（该文件路径为python路径/lib/python3.4/site-packages/haystack/backends/whoosh_backend.py）拷贝到app下面，并重命名为whoosh_cn_backend.py，例如blog/whoosh_cn_backend.py。修改如下添加from jieba.analyse import ChineseAnalyzer修改为如下</h6>

<pre><code>schema_fields[field_class.index_fieldname] =
    TEXT(stored=True, analyzer=ChineseAnalyzer(),
            field_boost=field_class.boost)
</code></pre>

<h3>2. 在settings.py中修改引擎，如下</h3>

<pre><code>HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'
    },
}
</code></pre>

<h3>3.重建索引，在进行搜索中文试试吧。</h3>

<h1>索引自动更新</h1>

<h6>如果没有索引自动更新，那么每当有新数据添加到数据库，就要手动执行update_index命令是不科学的。自动更新索引的最简单方法在settings.py添加一个信号。</h6>

<pre><code>HAYSTACK_SIGNAL_PROCESSOR =
            "haystack.signals.RealtimeSignalProcesso"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django-全文检索]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_1/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_1</id>
    <content type="html"><![CDATA[<h1>Django-全文检索概念</h1>

<p>-概念</p>

<h6>全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。全文搜索搜索引擎数据库中的数据。</h6>

<ul>
<li>方法

<h6>主要分为按字检索和按词检索两种。按字检索是指对于文章中的每一个字都建立索引，检索时将词分解为字的组合。按词检索指对文章中的词，即语义单位建立索引，检索时按词检索，并且可以处理同义项等。</h6></li>
</ul>


<p>-搜索引擎分类</p>

<h3>全文搜索、目录搜索、元搜索、垂直搜索</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress环境的搭建]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_octopress2/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_octopress2</id>
    <content type="html"><![CDATA[<h1>octopress环境的搭建</h1>

<h3>git、ruby、Devkit、markdownPad的安装与配置</h3>

<ul>
<li>git：版本管理工具，将代码托管到github上</li>
<li>Ruby+Devkit：生成静态的页面</li>
<li>MarkdwonPad:z在window下Markdown语法编辑器</li>
</ul>


<h2>1.    git安装与配置</h2>

<h2>2.    ruby安装与配置</h2>

<h2>3.    Devkit安装与配置</h2>

<h2>4.    Ruby与Devkit关联</h2>

<h2>5.安装octopress并设置默认主题</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 高级索引⑧]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy9/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy9</id>
    <content type="html"><![CDATA[<h1>NumPy - 高级索引</h1>

<h4>如果一个ndarray是非元组序列，数据类型为整数或布尔值的ndarray，或者至少一个元素为序列对象的元组，我们就能够用它来索引ndarray。高级索引始终返回数据的副本。 与此相反，切片只提供了一个视图。</h4>

<h4>有两种类型的高级索引：整数和布尔值。</h4>

<hr />

<h3>整数索引</h3>

<h4>这种机制有助于基于 N 维索引来获取数组中任意元素。 每个整数数组表示该维度的下标值。 当索引的元素个数就是目标ndarray的维度时，会变得相当直接。</h4>

<h4>以下示例获取了ndarray对象中每一行指定列的一个元素。 因此，行索引包含所有行号，列索引指定要选择的元素。 也就是矩阵的下表取值。X（i，j）</h4>

<pre><code>import numpy as np
a = np.array([[1,2,3,4],[5,6,7,8],[9,6,4,7]])
a
array([[1, 2, 3, 4],
       [5, 6, 7, 8],
       [9, 6, 4, 7]])
a[[0,0,2,2],[0,3,0,3]]
array([1, 4, 9, 7])
分别取4个角的点(0,0),(0,3),(2,0),(2,3)的元素组成一个数组
</code></pre>

<pre><code>x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
x
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
rows = np.array([[0,0],[3,3]])
cols = np.array([[0,2],[0,2]])
x[rows,cols]
array([[ 0,  2],
       [ 9, 11]])
分别取4个角的点(0,0),(0,2),(3,0),(3,2)的元素组成一个2维的数组，所以以后我们可以选取任何几个元素组成几维数组，例如：以下
</code></pre>

<pre><code>rows = np.array([[0,0],[2,2]])
cols = np.array([[1,2],[1,2]])
x[rows,cols]
array([[1, 2],
       [7, 8]])
</code></pre>

<h4>高级和基本索引可以通过使用切片:或省略号&hellip;与索引数组组合。 以下示例使用slice作为列索引和高级索引。 当切片用于两者时，结果是相同的。 但高级索引会导致复制，并且可能有不同的内存布局。</h4>

<pre><code>x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  
print  '我们的数组是：'  
print x 
print  '\n'  
切片
z = x[1:4,1:3]  
print  '切片之后，我们的数组变为：'  
print z 
print  '\n'  
对列使用高级索引 
y = x[1:4,[1,2]] 
print  '对列使用高级索引来切片：'  
print y
</code></pre>

<h4>结果</h4>

<pre><code>我们的数组是：
[[ 0  1  2] 
 [ 3  4  5] 
 [ 6  7  8]
 [ 9 10 11]]
切片之后，我们的数组变为：
[[ 4  5]
 [ 7  8]
 [10 11]]
对列使用高级索引来切片：
[[ 4  5]
 [ 7  8]
 [10 11]]
</code></pre>

<hr />

<h3>布尔索引</h3>

<h4>当结果对象是布尔运算(例如比较运算符)的结果时，将使用此类型的高级索引。</h4>

<pre><code>x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
x
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
x[x &gt; 5]
array([ 6,  7,  8,  9, 10, 11])
</code></pre>

<h4>这个例子使用了~(取补运算符)来过滤NaN。</h4>

<pre><code>a = np.array([np.nan,  1,2,np.nan,3,4,5])
a
array([nan,  1.,  2., nan,  3.,  4.,  5.])
a[np.isnan(a)]
array([nan, nan])
a[~np.isnan(a)]
array([1., 2., 3., 4., 5.])
</code></pre>

<pre><code>a = np.array([1,  2+6j,  5,  3.5+5j])
a[np.iscomplex(a)]
array([2. +6.j, 3.5+5.j])
</code></pre>

<h4>还有很多is的内置函数可以再IDE中查询</h4>

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 切片和索引⑦]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy8/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy8</id>
    <content type="html"><![CDATA[<h1>NumPy - 切片和索引</h1>

<h4>ndarray对象的内容可以通过索引或切片来访问和修改，就像 Python 的内置容器对象一样。</h4>

<h4>如前所述，ndarray对象中的元素遵循基于零的索引。 有三种可用的索引方法类型： 字段访问，基本切片和高级索引。</h4>

<h4>基本切片是 Python 中基本切片概念到 n 维的扩展。 通过将start，stop和step参数提供给内置的slice函数来构造一个 Python slice对象。 此slice对象被传递给数组来提取数组的一部分。</h4>

<hr />

<pre><code>a = np.arange(10)
a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
a[s]
array([2, 4, 6])
</code></pre>

<h4>通过将由冒号分隔的切片参数(start:stop:step)直接提供给ndarray对象，也可以获得相同的结果</h4>

<pre><code>a[1:4:2]
array([1, 3])
a[2]
2
</code></pre>

<h4>二维数组的切片</h4>

<pre><code>行的切片
a = np.array([[1,2,3],[3,4,5],[4,5,6]])
a
array([[1, 2, 3],
       [3, 4, 5],
       [4, 5, 6]])
a[1:]
array([[3, 4, 5],
       [4, 5, 6]])
a[1:2]
array([[3, 4, 5]])
a[1:3]
array([[3, 4, 5],
       [4, 5, 6]])
</code></pre>

<pre><code>列的切片
a[:,1]
array([2, 4, 5])
a[:,1:3]
array([[2, 3],
       [4, 5],
       [5, 6]])
</code></pre>

<pre><code>行列共切
a[:2,1:]
array([[2, 3],
       [4, 5]])
</code></pre>

<pre><code>a[:,1]
array([2, 4, 5])
a[:,2]
array([3, 5, 6])
</code></pre>

<h4>切片还可以包括省略号(&hellip;)，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的ndarray。</h4>

<pre><code>a[...,1]
array([2, 4, 5])
a[1,...]
array([3, 4, 5])
</code></pre>

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
</feed>
