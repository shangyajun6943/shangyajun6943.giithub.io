<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-07-06T19:40:33+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django-Django全文搜索]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_2/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_2</id>
    <content type="html"><![CDATA[<h1>Django-Django全文搜索haystack</h1>

<h4>haystack官网：<a href="http://django-haystack.readthedocs.io/en/master/">http://django-haystack.readthedocs.io/en/master/</a></h4>

<h1>使用的工具</h1>

<ul>
<li>haystack是django的开源搜索框架，该框架支持Solr, Elasticsearch, Whoosh, Xapian搜索引擎，不用更改代码，直接切换引擎，减少代码量。</li>
<li>搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小巧，配置比较简单，当然性能自然略低。</li>
<li>中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换whoosh的分词组件。

<h1>配置说明</h1>

<h6>现在假设我们的项目叫做Project,有一个myapp的app，简略的目录结构如下。</h6>

<h3>此models.py的内容假设如下：</h3>

<pre><code>from django.db import models
from django.contrib.auth.models import User
class Note(models.Model):
  user = models.ForeignKey(User)
  pub_date = models.DateTimeField()
  title = models.CharField(max_length=200)
  body = models.TextField()
  def __str__(self):
      return self.title
</code></pre></li>
</ul>


<h2>1.首先安装各工具</h2>

<pre><code>pip install whoosh django-haystack jieba
</code></pre>

<h2>2.添加 Haystack 到Django的 INSTALLED_APPS</h2>

<pre><code>INSTALLED_APPS = [ 
        'django.contrib.admin',
        'django.contrib.auth', 
        'django.contrib.contenttypes', 
        'django.contrib.sessions', 
        'django.contrib.sites',
          # Added. haystack先添加，
          'haystack', 
          # Then your usual apps... 自己的app要写在haystakc后面
          'blog',
]
</code></pre>

<h2>3.修改 你的 settings.py，以配置引擎</h2>

<pre><code>HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}
</code></pre>

<h6>其中顾名思义，ENGINE为使用的引擎必须要有，如果引擎是Whoosh，则PATH必须要填写，其为Whoosh 索引文件的存放文件夹。其他引擎的配置见官方文档<a href="http://django-haystack.readthedocs.io/en/master/">http://django-haystack.readthedocs.io/en/master/</a></h6>

<h2>4.创建索引</h2>

<h6>如果你想针对某个app例如mainapp做全文检索，则必须在mainapp的目录下面建立search_indexes.py文件，文件名不能修改。内容如下：</h6>

<pre><code>import datetime
from haystack import indexes
from myapp.models import Note
class NoteIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    author = indexes.CharField(model_attr='user')
    pub_date = indexes.DateTimeField(model_attr='pub_date')
    def get_model(self):
        return Note
    def index_queryset(self, using=None):
        """Used when the entire index for model is updated."""
        return self.get_model().objects.filter(pub_date__lte=datetime.datetime.now())
</code></pre>

<h6>每个索引里面必须有且只能有一个字段为document=True，这代表haystack 和搜索引擎将使用此字段的内容作为索引进行检索(primary field)。其他的字段只是附属的属性，方便调用，并不作为检索数据。</h6>

<h6>注意：如果使用一个字段设置了document=True，则一般约定此字段名为text，这是在SearchIndex类里面一贯的命名，以防止后台混乱，当然名字你也可以随便改，不过不建议改。</h6>

<h6>并且，haystack提供了use_template=True在text字段，这样就允许我们使用数据模板去建立搜索引擎索引的文件，使用方便（官方推荐，当然还有其他复杂的建立索引文件的方式，目前我还不知道），数据模板的路径为yourapp/templates/search/indexes/yourapp/note_text.txt，例如本例子为blog/templates/search/indexes/blog/note_text.txt文件名必须为要索引的类名_text.txt,其内容为</h6>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class=''></code></pre></td></tr></table></div></figure></p>

<h6>这个数据模板的作用是对Note.title, Note.user.get_full_name,Note.body这三个字段建立索引，当检索的时候会对这三个字段做全文检索匹配。</h6>

<h3>在urls.py中配置如下url信息，当然url路由可以随意写。</h3>

<pre><code>(r'^search/', include('haystack.urls')),
</code></pre>

<h6>其实haystack.urls的内容为，</h6>

<pre><code>from django.conf.urls import url
from haystack.views import SearchView
urlpatterns = [
    url(r'^$', SearchView(), name='haystack_search'),
]
</code></pre>

<h6>SearchView()视图函数默认使用的html模板为当前app目录下，路径为myapp/templates/search/search.html</h6>

<h6>所以需要在blog/templates/search/下添加search.html文件，自带了分页,内容为</h6>

<h6><a href="http://django-haystack.readthedocs.io/en/master/tutorial.html#handling-data">http://django-haystack.readthedocs.io/en/master/tutorial.html#handling-data</a></h6>

<h2>5.重建索引文件</h2>

<h3>使用python manage.py rebuild_index或者使用update_index命令。</h3>

<h2>6. 使用jieba分词</h2>

<h6># 1.将文件whoosh_backend.py（该文件路径为python路径/lib/python3.4/site-packages/haystack/backends/whoosh_backend.py）拷贝到app下面，并重命名为whoosh_cn_backend.py，例如blog/whoosh_cn_backend.py。修改如下添加from jieba.analyse import ChineseAnalyzer修改为如下</h6>

<pre><code>schema_fields[field_class.index_fieldname] =
    TEXT(stored=True, analyzer=ChineseAnalyzer(),
            field_boost=field_class.boost)
</code></pre>

<h3>2. 在settings.py中修改引擎，如下</h3>

<pre><code>HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'
    },
}
</code></pre>

<h3>3.重建索引，在进行搜索中文试试吧。</h3>

<h1>索引自动更新</h1>

<h6>如果没有索引自动更新，那么每当有新数据添加到数据库，就要手动执行update_index命令是不科学的。自动更新索引的最简单方法在settings.py添加一个信号。</h6>

<pre><code>HAYSTACK_SIGNAL_PROCESSOR =
            "haystack.signals.RealtimeSignalProcesso"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django-全文检索]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_1/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_quanwen_1</id>
    <content type="html"><![CDATA[<h1>Django-全文检索概念</h1>

<p>-概念</p>

<h6>全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。全文搜索搜索引擎数据库中的数据。</h6>

<ul>
<li>方法

<h6>主要分为按字检索和按词检索两种。按字检索是指对于文章中的每一个字都建立索引，检索时将词分解为字的组合。按词检索指对文章中的词，即语义单位建立索引，检索时按词检索，并且可以处理同义项等。</h6></li>
</ul>


<p>-搜索引擎分类</p>

<h3>全文搜索、目录搜索、元搜索、垂直搜索</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress环境的搭建]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_octopress2/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_octopress2</id>
    <content type="html"><![CDATA[<h1>octopress环境的搭建</h1>

<h3>git、ruby、Devkit、markdownPad的安装与配置</h3>

<ul>
<li>git：版本管理工具，将代码托管到github上</li>
<li>Ruby+Devkit：生成静态的页面</li>
<li>MarkdwonPad:z在window下Markdown语法编辑器</li>
</ul>


<h2>1.    git安装与配置</h2>

<h2>2.    ruby安装与配置</h2>

<h2>3.    Devkit安装与配置</h2>

<h2>4.    Ruby与Devkit关联</h2>

<h2>5.安装octopress并设置默认主题</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django-request对象]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_Django_5/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_Django_5</id>
    <content type="html"><![CDATA[<h1>Django-Django-request对象属性</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django-通用视图DetailView]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_Django_4/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_Django_4</id>
    <content type="html"><![CDATA[<h1>Django-通用视图DetailView</h1>

<h3>类图</h3>

<ul>
<li>url.py
<code>
urlpatterns = [
  re_path('getone/(?P&lt;id3&gt;[0-9]{1,10})',GetOneProduct.as_view()),
]
</code></li>
<li>view.py
<code>
class GetOneProduct(DetailView):
  model=Product
  template_name='product/showone.html'
  context_object_name='pro_one'
  pk_url_kwarg='id3'
</code></li>
</ul>


<p><strong>常用参数</strong></p>

<ul>
<li>model  必须指定模型，但会是这个模型下的所有的数据</li>
<li>queryset=？  指定的通过模型语言返回指定的QuerySet集合</li>
<li>template_name 指定返回的模板的地址</li>
<li>context_object_name 指定模板语言中返回的变量名称，默认是object_list</li>
<li>slug_url_kwarg = &lsquo;slug&rsquo; 指定url中配置中的名称</li>
<li>pk_url_kwarg = &lsquo;pk'指定url配置中的的名称</li>
<li><strong>因为DetailView只能返回一条数据，所以必须接受url传来的数据，默认数据的名称只能是pk或sulg，写成其他会报错，若果想用其他名称 重写get_object方法</strong></li>
<li>query_pk_and_slug = False 是否使用上面两个名称</li>
<li>http_method_names   http访问方式。包含了GET、POST等
<strong>常重写的方法</strong></li>
<li><p>额外的添加数据get_context_data方法
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def  get_context_data(self,**kwargs):&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  context=super(ProductList,self).get_context_data(**kwargs)
</span><span class='line'>
</span><span class='line'>  context['author_list']=Author.authors.all()
</span><span class='line'>
</span><span class='line'>  return context
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;返回的数据集get_queryset（如果想快速查找必须重写这个方法，若果你看了get_object源码你就必须重写）
</span><span class='line'>&lt;code&gt;
</span><span class='line'>def get_queryset(self):
</span><span class='line'>       return Product.products.filter(pk__gt=3)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>这个方法重写就不用写model和queryset的中的值,但是要是排序时候这个方法不能重写&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;从url中获取参数，返回指定的数据集
</span><span class='line'>&lt;strong&gt;url.py&lt;/strong&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>re_path('list/([0-9]+)/([0-9]+)/([0-9]+)',ProductOne.as_view()),
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>&lt;strong&gt;view.py&lt;/strong&gt;</span></code></pre></td></tr></table></div></figure>
def get_queryset(self):
  print(self.args)
  return Product.products.get(pk=int(self.args[0]))</p></li>
</ul>


<p>```
其中：self.args存放的就是url（get方法）传送到服务器上的值</p>

<ul>
<li>get_context_object_name
返回上下文的名称，context_object_name的值。默认为’数据对象’_list
-dispatch
返回处理请求的函数，此函数为继承后用户定义，匹配http_method_names中声明的名称。如果对应请求类型的函数不存在，则触发http_method_not_allowed函数，返回状态吗405</li>
</ul>


<p>-render_to_response
调用response_class返回渲染后的模板。</p>
]]></content>
  </entry>
  
</feed>
