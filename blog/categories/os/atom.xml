<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Os | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/os/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-08-20T22:22:28+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Os处理器状态]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_os2/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_os2</id>
    <content type="html"><![CDATA[<h1>处理器状态</h1>

<hr />

<h4>中央处理器（CPU）</h4>

<h5>处理器组成：运算器、控制器、一系列的<code>寄存器</code>、高速缓存</h5>

<h5>两种寄存器</h5>

<ol>
<li>用户可见寄存器：高级语言编译器通过优化算法分配并使用，以减少程序的访问内存的次数，提高运行效率</li>
<li>控制和状态寄存器：用于控制处理器的操作，通常由操作系统代码使用</li>
</ol>


<hr />

<h4>控制和状态寄存器</h4>

<ul>
<li>用于控制处理器的操作</li>
<li>在某种特权级别下可以访问、修改</li>
<li><p>常见的控制和状态寄存器：</p></li>
<li><p>程序计数器（PC：program Counter）：记录将取出的指令地址</p></li>
<li>指令寄存器（IR：Instruction Register）：记录最近取出的指令</li>
<li>程序状态字（PSW：Program Status Word）：记录处理器的运行状态如：条形码、模式、控制位等信息。</li>
</ul>


<hr />

<h4>现代CPU状态设计划分：两种、三种或四种</h4>

<h5>在程序状态字寄存器PSW中专门是指一位，根据运行程序<code>对资源和指令的使用权限</code>而设置不同的CPU状态</h5>

<h3>操作系统需要两种CPU状态</h3>

<ol>
<li>内核态：运行操作系统程序</li>
<li>用户态：运行用户程序</li>
</ol>


<h4>特权指令：只能有操作系统使用、用户程序不能使用的指令。启动IO、内存清零、修改程序状态字、设置时钟、允许/禁止中断、停机</h4>

<h4>非特权指令：用户程序可以使用的指令</h4>

<h3>X86支持4个处理器特权级别，特权环：R0-R3</h3>

<h4>R0相当于内核态，R3相当于用户态，R1和R2结余两者之间</h4>

<hr />

<h3>CPU状态之间的转换</h3>

<h6>用户态->内核态  唯一途径-> 中断/异常/陷入机制</h6>

<h6>内核态->用户态  设置程序状态字PSW</h6>

<h5>一条特殊的指令：陷入指令（又称访管指令）：提供给用户程序的接口，用于调用操作系统的功能（服务）。如：int、trap、syscall、sysenter/sysexit</h5>

<hr />

<h2>中断/异常机制</h2>

<h4>中断/异常：对于操作系统的重要性就好比：汽车的发动机、飞机的引擎，可以这么说：操作系统是由‘中断驱动’或者‘事件驱动’的</h4>

<h4>中断/异常：CPU对系统发生中的某个事件做出的一种反应，事件的发生改变了处理器的控制流</h4>

<h4>中断/异常：CPU暂停正在执行的程序，保留现场后自动转去执行相应的事件的处理程序，处理完成后返回断点，继续执行被打断的程序。</h4>

<h4>特点：随机发生、自动处理、和恢复</h4>

<h3>为什么引入中断与异常？</h3>

<h2>中断/异常合称：事件</h2>

<h3>事件分为：外中断（中断）、内中断（异常）</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[操作系统]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_os1/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_os1</id>
    <content type="html"><![CDATA[<h1>操作系统怎么执行程序的？</h1>

<hr />

<pre><code>include &lt;stdio.h&gt;
int main(int argc,char *argc[])
{
    puts("hello word!");
    return 0;
}
</code></pre>

<h5>以这个程序为例，解释操作系统怎么调用程序！</h5>

<hr />

<ol>
<li>首先我们告诉操作系统我们执行helloworld程序(使用命令，或双击)</li>
<li>操作系统接受到用户请求，找到helloworld程序的相关信息，检查文件是否是可执行文件；并通过程序的首部信息，确定代码和数据在可执行文件中的位置并计算出对应的磁盘块地址。（可执行文件格式：window：pe linux：elf）</li>
<li>操作系统：创建一个进程，并将helloworld可执行文件映射到改进程结构，表示由该进程执行helloworld程序</li>
<li>操作系统：为helloworld程序设置CPU上下文环境并跳到程序开始处（假设调度程序选中了hello程序）</li>
<li>调度程序：执行helloworld程序的第一条指令，发生<code>缺页异常</code>（因为执行文件需要把程序读入内存）</li>
<li>操作系统：分配一页空闲的物理内存，并将代码从磁盘读入内存，然后继续执行helloworld程序（有时候程序很大，操作系统会多次从磁盘读程序进入内存，也会发生很多次缺页异常）</li>
<li>helloworld程序执行puts函数（系统调用），在显示器上写一字符串</li>
<li>操作系统：找到要将字符串宋往的显示设备，通常设备是由一个进程控制的，所以操作系统将写的字符串送给该进程</li>
<li>操作系统：控制设备的进程告诉设备的窗口系统它要显示的字符串，窗口系统确定知识一个合法的操作，然后将字符串转换成像素，将像素写入设备的存储映像区。</li>
<li>视频硬件将像素转换成显示器可接收的一组控制/数据信号</li>
<li>显示器解释信号，激发液晶屏</li>
<li>我们在屏幕上看到了‘helloworld’</li>
</ol>

]]></content>
  </entry>
  
</feed>
