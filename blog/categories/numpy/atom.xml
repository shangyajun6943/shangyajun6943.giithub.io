<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Numpy | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/numpy/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-08-27T23:03:54+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 高级索引⑧]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy9/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy9</id>
    <content type="html"><![CDATA[<h1>NumPy - 高级索引</h1>

<h4>如果一个ndarray是非元组序列，数据类型为整数或布尔值的ndarray，或者至少一个元素为序列对象的元组，我们就能够用它来索引ndarray。高级索引始终返回数据的副本。 与此相反，切片只提供了一个视图。</h4>

<h4>有两种类型的高级索引：整数和布尔值。</h4>

<hr />

<h3>整数索引</h3>

<h4>这种机制有助于基于 N 维索引来获取数组中任意元素。 每个整数数组表示该维度的下标值。 当索引的元素个数就是目标ndarray的维度时，会变得相当直接。</h4>

<h4>以下示例获取了ndarray对象中每一行指定列的一个元素。 因此，行索引包含所有行号，列索引指定要选择的元素。 也就是矩阵的下表取值。X（i，j）</h4>

<pre><code>import numpy as np
a = np.array([[1,2,3,4],[5,6,7,8],[9,6,4,7]])
a
array([[1, 2, 3, 4],
       [5, 6, 7, 8],
       [9, 6, 4, 7]])
a[[0,0,2,2],[0,3,0,3]]
array([1, 4, 9, 7])
分别取4个角的点(0,0),(0,3),(2,0),(2,3)的元素组成一个数组
</code></pre>

<pre><code>x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
x
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
rows = np.array([[0,0],[3,3]])
cols = np.array([[0,2],[0,2]])
x[rows,cols]
array([[ 0,  2],
       [ 9, 11]])
分别取4个角的点(0,0),(0,2),(3,0),(3,2)的元素组成一个2维的数组，所以以后我们可以选取任何几个元素组成几维数组，例如：以下
</code></pre>

<pre><code>rows = np.array([[0,0],[2,2]])
cols = np.array([[1,2],[1,2]])
x[rows,cols]
array([[1, 2],
       [7, 8]])
</code></pre>

<h4>高级和基本索引可以通过使用切片:或省略号&hellip;与索引数组组合。 以下示例使用slice作为列索引和高级索引。 当切片用于两者时，结果是相同的。 但高级索引会导致复制，并且可能有不同的内存布局。</h4>

<pre><code>x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  
print  '我们的数组是：'  
print x 
print  '\n'  
切片
z = x[1:4,1:3]  
print  '切片之后，我们的数组变为：'  
print z 
print  '\n'  
对列使用高级索引 
y = x[1:4,[1,2]] 
print  '对列使用高级索引来切片：'  
print y
</code></pre>

<h4>结果</h4>

<pre><code>我们的数组是：
[[ 0  1  2] 
 [ 3  4  5] 
 [ 6  7  8]
 [ 9 10 11]]
切片之后，我们的数组变为：
[[ 4  5]
 [ 7  8]
 [10 11]]
对列使用高级索引来切片：
[[ 4  5]
 [ 7  8]
 [10 11]]
</code></pre>

<hr />

<h3>布尔索引</h3>

<h4>当结果对象是布尔运算(例如比较运算符)的结果时，将使用此类型的高级索引。</h4>

<pre><code>x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])
x
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
x[x &gt; 5]
array([ 6,  7,  8,  9, 10, 11])
</code></pre>

<h4>这个例子使用了~(取补运算符)来过滤NaN。</h4>

<pre><code>a = np.array([np.nan,  1,2,np.nan,3,4,5])
a
array([nan,  1.,  2., nan,  3.,  4.,  5.])
a[np.isnan(a)]
array([nan, nan])
a[~np.isnan(a)]
array([1., 2., 3., 4., 5.])
</code></pre>

<pre><code>a = np.array([1,  2+6j,  5,  3.5+5j])
a[np.iscomplex(a)]
array([2. +6.j, 3.5+5.j])
</code></pre>

<h4>还有很多is的内置函数可以再IDE中查询</h4>

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 切片和索引⑦]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy8/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy8</id>
    <content type="html"><![CDATA[<h1>NumPy - 切片和索引</h1>

<h4>ndarray对象的内容可以通过索引或切片来访问和修改，就像 Python 的内置容器对象一样。</h4>

<h4>如前所述，ndarray对象中的元素遵循基于零的索引。 有三种可用的索引方法类型： 字段访问，基本切片和高级索引。</h4>

<h4>基本切片是 Python 中基本切片概念到 n 维的扩展。 通过将start，stop和step参数提供给内置的slice函数来构造一个 Python slice对象。 此slice对象被传递给数组来提取数组的一部分。</h4>

<hr />

<pre><code>a = np.arange(10)
a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
a[s]
array([2, 4, 6])
</code></pre>

<h4>通过将由冒号分隔的切片参数(start:stop:step)直接提供给ndarray对象，也可以获得相同的结果</h4>

<pre><code>a[1:4:2]
array([1, 3])
a[2]
2
</code></pre>

<h4>二维数组的切片</h4>

<pre><code>行的切片
a = np.array([[1,2,3],[3,4,5],[4,5,6]])
a
array([[1, 2, 3],
       [3, 4, 5],
       [4, 5, 6]])
a[1:]
array([[3, 4, 5],
       [4, 5, 6]])
a[1:2]
array([[3, 4, 5]])
a[1:3]
array([[3, 4, 5],
       [4, 5, 6]])
</code></pre>

<pre><code>列的切片
a[:,1]
array([2, 4, 5])
a[:,1:3]
array([[2, 3],
       [4, 5],
       [5, 6]])
</code></pre>

<pre><code>行列共切
a[:2,1:]
array([[2, 3],
       [4, 5]])
</code></pre>

<pre><code>a[:,1]
array([2, 4, 5])
a[:,2]
array([3, 5, 6])
</code></pre>

<h4>切片还可以包括省略号(&hellip;)，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的ndarray。</h4>

<pre><code>a[...,1]
array([2, 4, 5])
a[1,...]
array([3, 4, 5])
</code></pre>

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 来自数值范围的数组⑥]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy7/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy7</id>
    <content type="html"><![CDATA[<h1>NumPy - 来自数值范围的数组</h1>

<hr />

<ul>
<li>numpy.arange：包含给定范围内的等间隔值。</li>
</ul>


<pre><code>numpy.arange(start, stop, step, dtype)
</code></pre>

<ol>
<li>start 范围的起始值，默认为0</li>
<li>stop 范围的终止值(不包含)</li>
<li>step 两个值的间隔，默认为1</li>
<li>dtype 返回ndarray的数据类型，如果没有提供，则会使用输入数据的类型。</li>
</ol>


<pre><code>a = np.arange(0,100,2,dtype=float)
a
array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18., 20., 22., 24.,
       26., 28., 30., 32., 34., 36., 38., 40., 42., 44., 46., 48., 50.,
       52., 54., 56., 58., 60., 62., 64., 66., 68., 70., 72., 74., 76.,
       78., 80., 82., 84., 86., 88., 90., 92., 94., 96., 98.])
</code></pre>

<hr />

<ul>
<li>numpy.linspace 此函数类似于arange()函数。 在此函数中，指定了范围之间的均匀间隔数量，而不是步长</li>
</ul>


<pre><code>numpy.linspace(start, stop, num, endpoint, retstep, dtype)
</code></pre>

<ol>
<li>start 序列的起始值</li>
<li>stop 序列的终止值，如果endpoint为true，该值包含于序列中</li>
<li>num 要生成的等间隔样例数量，默认为50</li>
<li>endpoint 序列中是否包含stop值，默认为ture</li>
<li>retstep 如果为true，返回样例，以及连续数字之间的步长</li>
<li>dtype 输出ndarray的数据类型</li>
</ol>


<pre><code>a = np.linspace(10,20,5) #10/5-1 5个数
a
array([10. , 12.5, 15. , 17.5, 20. ])
a = np.linspace(10,20,6) #10/6-1 6个数
a
array([10., 12., 14., 16., 18., 20.])
a = np.linspace(10,20,7) #10/7 7个数
a
array([10.        , 11.66666667, 13.33333333, 15.        , 16.66666667,
       18.33333333, 20.        ])
</code></pre>

<pre><code>a = np.linspace(10,20,5,endpoint=False) #10/5  5个数不包含20
a
array([10., 12., 14., 16., 18.])
a = np.linspace(10,20,5,retstep=True)
a
(array([10. , 12.5, 15. , 17.5, 20. ]), 2.5)
</code></pre>

<hr />

<ul>
<li>numpy.logspace:此函数返回一个ndarray对象，其中包含在对数刻度上均匀分布的数字。 刻度的开始和结束端点是某个底数的幂，通常为 10。</li>
</ul>


<pre><code>numpy.logspace(start, stop, num, endpoint, base, dtype)
</code></pre>

<ol>
<li>start 起始值是base ** start</li>
<li>stop 终止值是base ** stop</li>
<li>num 范围内的数值数量，默认为50</li>
<li>endpoint 如果为true，终止值包含在输出数组当中</li>
<li>base 对数空间的底数，默认为10</li>
<li>dtype 输出数组的数据类型，如果没有提供，则取决于其它参数</li>
</ol>


<pre><code>a = np.logspace(1.0,  2.0, num =  10) #1=log10  2=log10^2
a
array([ 10.        ,  12.91549665,  16.68100537,  21.5443469 ,
        27.82559402,  35.93813664,  46.41588834,  59.94842503,
        77.42636827, 100.        ])
a = np.logspace(1,10,num =  10,  base  =  2)
a
array([   2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.,  512.,
       1024.])
</code></pre>

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 来自现有数据的数组⑤]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy6/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy6</id>
    <content type="html"><![CDATA[<h1>NumPy - 来自现有数据的数组-从现有数据创建数组。</h1>

<hr />

<ul>
<li>numpy.asarray：此函数类似于numpy.array，除了它有较少的参数。 这个例程对于将 Python 序列转换为ndarray非常有用。
<code>
numpy.asarray(a, dtype = None, order = None)
</code></li>
<li>a 任意形式的输入参数，比如列表、列表的元组、元组、元组的元组、元组的列表</li>
<li>dtype 通常，输入数据的类型会应用到返回的ndarray</li>
<li><p>order &lsquo;C'为按行的 C 风格数组，'F'为按列的 Fortran 风格数组
<code>
x=[(1,2,3),(4,5,6)]
a= np.asarray(x,dtype=np.float32,order='C')
print(a)
[[1. 2. 3.]
[4. 5. 6.]]
y=[['1','2','3'],[1,2,3]]
print(y)
[['1', '2', '3'], [1, 2, 3]]
a = np.asarray(y,dtype=np.float32,order='C')
print(a)
[[1. 2. 3.]
[1. 2. 3.]]
a = np.asarray(y,dtype=np.float32,order='F')
print(a)
[[1. 2. 3.]
[1. 2. 3.]]
</code></p></li>
<li><p>numpy.frombuffer:此函数将缓冲区解释为一维数组。 暴露缓冲区接口的任何对象都用作参数来返回ndarray
<code>
numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)
</code></p></li>
<li>buffer 任何暴露缓冲区接口的对象</li>
<li>dtype 返回数组的数据类型，默认为float</li>
<li>count 需要读取的数据数量，默认为-1，读取所有数据</li>
<li>offset 需要读取的起始位置，默认为0</li>
</ul>


<pre><code>import numpy as np 
s =  'Hello World' 
a = np.frombuffer(s, dtype =  'S1')  
print a
['H'  'e'  'l'  'l'  'o'  ' '  'W'  'o'  'r'  'l'  'd']
注意：python中没实现，必须把str变成byte后就可以了
</code></pre>

<hr />

<ul>
<li>numpy.fromiter：任何可迭代对象构建一个ndarray对象，返回一个新的一维数组。
<code>
numpy.fromiter(iterable, dtype, count = -1)
</code></li>
<li>iterable 任何可迭代对象</li>
<li>dtype 返回数组的数据类型</li>
<li>count 需要读取的数据数量，默认为-1，读取所有数据</li>
</ul>


<pre><code>b=[i for i in range(10)]
b
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
b= iter(b)
print(b)
&lt;list_iterator object at 0x04BFC770&gt;
a = np.fromiter(b,dtype=int)
a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print(a)
[0 1 2 3 4 5 6 7 8 9]
c=[i for i in range(10)]
a = np.fromiter(c,dtype=int)
print(a)
[0 1 2 3 4 5 6 7 8 9]
注意：str，list，tuple，dict，set都是可迭代对象所以都可以使用
</code></pre>

<hr />

<ul>
<li>fromstring：从字符串中读取元素组成数组
<code>
fromstring(string, dtype=float, count=-1, sep='')
</code></li>
<li>string 字符串对象</li>
<li>dtype 返回数组的数据类型</li>
<li>count 读取几个 -1 去读</li>
<li>sep 用什么分隔</li>
</ul>


<pre><code>np.fromstring('1 2', dtype=int, sep=' ')
array([1, 2])
np.fromstring('1, 2', dtype=int, sep=',')
array([1, 2])
注意：目前只能是这样的字符串，其他没试验成功
c= '1 2 3'
a = np.fromstring(c,dtype=int,count=2,sep=' ')
array([1, 2])
</code></pre>

<ul>
<li>np.fromfile 从文件中读，生成数组</li>
<li>np.fromfunction 从函数中读，生成数组</li>
<li>np.fromregex 从正则表达式读，生成数组

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 数组创建例程④]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy5/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy5</id>
    <content type="html"><![CDATA[<h1>NumPy - 数组创建例程</h1>

<hr />

<ul>
<li>numpy.empty</li>
</ul>


<h5>它创建指定形状和dtype的未初始化数组。 它使用以下构造函数：</h5>

<pre><code>numpy.empty(shape, dtype = float, order = 'C')
</code></pre>

<ol>
<li>Shape 空数组的形状，整数或整数元组</li>
<li>Dtype 所需的输出数组类型，可选</li>
<li>Order &lsquo;C'为按行的 C 风格数组，'F'为按列的 Fortran 风格数组
<code>
a = np.empty((3,3),dtype=int)
print(a)
[[  2   0   0]
[  0   0   0]
[464   0   0]]
注意：数组元素为随机值，因为它们未初始化。
</code></li>
</ol>


<hr />

<ul>
<li>numpy.zeros返回特定大小，以 0 填充的新数组
<code>
numpy.zeros(shape, dtype = float, order = 'C')
a= np.zeros((3,3),dtype=int)
print(a)
[[0 0 0]
[0 0 0]
[0 0 0]]
注意：创建全为0的3*3的数组
</code></li>
<li>numpy.ones返回特定大小，以 1 填充的新数组。</li>
</ul>


<pre><code>a = np.ones((3,3),dtype=int)
print(a)
[[1 1 1]
 [1 1 1]
 [1 1 1]]
</code></pre>

<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
</feed>
