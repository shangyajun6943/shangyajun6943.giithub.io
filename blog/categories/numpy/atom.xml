<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Numpy | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/numpy/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-08-16T23:47:42+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python_NumPy - NumPy - 数据类型②]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy3/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy3</id>
    <content type="html"><![CDATA[<h1>NumPy - 数据类型</h1>

<ol>
<li>bool_   存储为一个字节的布尔值(真或假)</li>
<li>int_    默认整数，相当于 C 的long，通常为int32或int64</li>
<li>intc    相当于 C 的int，通常为int32或int64</li>
<li>intp    用于索引的整数，相当于 C 的size_t，通常为int32或int64</li>
<li>int     8字节(-128 ~ 127)</li>
<li>int16   16位整数(-32768 ~ 32767)</li>
<li>int32   32位整数(-2147483648 ~ 2147483647)</li>
<li>int64   64位整数(-9223372036854775808 ~ 9223372036854775807)</li>
<li>uint8   8位无符号整数(0 ~ 255)</li>
<li>uint16  16位无符号整数(0 ~ 65535)</li>
<li>uint32  32位无符号整数(0 ~ 4294967295)</li>
<li>uint64  64位无符号整数(0 ~ 18446744073709551615)</li>
<li>float_  float64的简写</li>
<li>float16 半精度浮点：符号位，5 位指数，10 位尾数</li>
<li>float32 单精度浮点：符号位，8 位指数，23 位尾数</li>
<li>float64 双精度浮点：符号位，11 位指数，52 位尾数</li>
<li>complex_complex 128的简写</li>
<li>complex64   复数，由两个 32 位浮点表示(实部和虚部)</li>
<li>complex128  复数，由两个 64 位浮点表示(实部和虚部)

<h4>NumPy 数字类型是dtype(数据类型)对象的实例，每个对象具有唯一的特征。 这些类型可以是np.bool_，np.float32等。</h4></li>
</ol>


<hr />

<h3>数据类型对象 (dtype)</h3>

<h4>数据类型对象描述了对应于数组的固定内存块的解释，取决于以下方面：</h4>

<ul>
<li><p>数据类型(整数、浮点或者 Python 对象)</p></li>
<li><p>数据大小</p></li>
<li><p>字节序(小端或大端)</p></li>
<li><p>在结构化类型的情况下，字段的名称，每个字段的数据类型，和每个字段占用的内存块部分。</p></li>
<li><p>如果数据类型是子序列，它的形状和数据类型。</p></li>
<li><p>字节顺序取决于数据类型的前缀&lt;或>。&lt;意味着编码是小端(最小有效字节存储在最小地址中)。>意味着编码是大端(最大有效字节存储在最小地址中)。</p></li>
</ul>


<h4>dtype可由一下语法构造：</h4>

<pre><code>numpy.dtype(object, align, copy)
</code></pre>

<h4>参数为：</h4>

<ul>
<li><p>Object：被转换为数据类型的对象。</p></li>
<li><p>Align：如果为true，则向字段添加间隔，使其类似 C 的结构体。</p></li>
<li><p>Copy? 生成dtype对象的新副本，如果为flase，结果是内建数据类型对象的引用。</p></li>
</ul>


<h3>示例 像创建列名一样创建数组</h3>

<pre><code>dt = np.dtype([('age',bool)])
a = np.array([12,13,14],dtype=dt)
print(a)
[( True,) ( True,) ( True,)]
print(a['age'])
[ True  True  True]
dt = np.dtype([('age',int),('name',str)])
a = np.array([(12,'a'),(13,'b')],dtype=dt)
print(a)
[(12, '') (13, '')]
dt = np.dtype(('age',bool))
student = np.dtype([('name','S20'),  ('age',  'i1'),  ('marks',  'f4')])
a = np.array([('abc',  21,  50),('xyz',  18,  75)], dtype = student)
print(a)
[(b'abc', 21, 50.) (b'xyz', 18, 75.)]
student = np.dtype([('name','str'),  ('age',  int),  ('marks',  float)])
a = np.array([('abc',  21,  50),('xyz',  18,  75)], dtype = student)
print(a)
[('', 21, 50.) ('', 18, 75.)]
 student = np.dtype([('name',str),  ('age',  int),  ('marks',  float)])
a = np.array([('abc',  21,  50),('xyz',  18,  75)], dtype = student)
print(a)
[('', 21, 50.) ('', 18, 75.)]
student = np.dtype([('name','a'),  ('age',  'i'),  ('marks',  'f')])
a = np.array([('abc',  21,  50),('xyz',  18,  75)], dtype = student)
print(a)
[(b'', 21, 50.) (b'', 18, 75.)]
student = np.dtype([('name','S'),  ('age',  'i'),  ('marks',  'f')])
a = np.array([('abc',  21,  50),('xyz',  18,  75)], dtype = student)
print(a)
[(b'', 21, 50.) (b'', 18, 75.)]
student = np.dtype([('name','S20'),  ('age',  'i'),  ('marks',  'f')])
a = np.array([[('abc',  21,  50),('xyz',  18,  75)],[('fff',  21,  50),('eee',  18,  75)]], dtype = student)
print(a)
[[(b'abc', 21, 50.) (b'xyz', 18, 75.)]
 [(b'fff', 21, 50.) (b'eee', 18, 75.)]]
print(a['name'])
[[b'abc' b'xyz']
 [b'fff' b'eee']]
</code></pre>

<h4>每个内建类型都有一个唯一定义它的字符代码：</h4>

<ul>
<li><p>&lsquo;b'：布尔值</p></li>
<li><p>&lsquo;i'：符号整数</p></li>
<li><p>&lsquo;u'：无符号整数</p></li>
<li><p>&lsquo;f'：浮点</p></li>
<li><p>&lsquo;c'：复数浮点</p></li>
<li><p>&rsquo;m'：时间间隔</p></li>
<li><p>&rsquo;M'：日期时间</p></li>
<li><p>&lsquo;O'：Python 对象</p></li>
<li><p>&rsquo;S', &lsquo;a'：字节串</p></li>
<li><p>&lsquo;U'：Unicode</p></li>
<li><p>&lsquo;V'：原始数据(void)</p></li>
</ul>


<h4><a href="https://www.yiibai.com/numpy/numpy_array_attributes.html">https://www.yiibai.com/numpy/numpy_array_attributes.html</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_NumPy - Ndarray 对象①]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy2/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy2</id>
    <content type="html"><![CDATA[<h1>Ndarray 对象</h1>

<h4>NumPy 中定义的最重要的对象是称为 ndarray 的 N 维数组类型。 它描述相同类型的元素集合。 可以使用基于<code>零</code>的索引访问集合中的项目。</h4>

<h4>ndarray中的每个元素在内存中使用相同大小的块。 ndarray中的每个元素是数据类型对象的对象(称为 dtype)。</h4>

<h4>从ndarray对象提取的任何元素(通过切片)由一个数组标量类型的 Python 对象表示。 下图显示了ndarray，数据类型对象(dtype)和数组标量类型之间的关系。</h4>

<p><img src="/images/np/430090425_51678.jpg" alt="images" /></p>

<h4>基本的ndarray是使用 NumPy 中的数组函数创建的，如下所示：</h4>

<pre><code>numpy.array
</code></pre>

<h4>它从<code>任何暴露数组接口的对象</code>，或从返回数组的任何方法创建一个ndarray。</h4>

<pre><code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)
</code></pre>

<ol>
<li>object 任何暴露数组接口方法的对象都会返回一个数组或任何(嵌套)序列。</li>
<li>dtype 数组的所需数据类型，可选。</li>
<li>copy 可选，默认为true，对象是否被复制。</li>
<li>order C(按行)、F(按列)或A(任意，默认)。</li>
<li>subok 默认情况下，返回的数组被强制为基类数组。 如果为true，则返回子类。</li>
<li>ndimin 指定返回数组的最小维数。</li>
</ol>


<h4>示例 1 一维数组</h4>

<pre><code>a = np.array([1,2,3])
print(a)
[1 2 3]
</code></pre>

<h4>示例 2 多维数组</h4>

<pre><code>a = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a)
[[1 2 3]
[4 5 6]
[7 8 9]]
</code></pre>

<h4>示例 3 最小维度</h4>

<pre><code>a = np.array([1,2,3],ndmin=1)
print(a)
[1 2 3]
a = np.array([1,2,3],ndmin=2)
print(a)
[[1 2 3]]
a = np.array([1,2,3],ndmin=3)
print(a)
[[[1 2 3]]]
</code></pre>

<h4>示例 4 dtype 参数</h4>

<pre><code>a = np.array([1,2,3],dtype=complex)
print(a)
[1.+0.j 2.+0.j 3.+0.j]
a = np.array([1,2,3],dtype=int)
print(a)
[1 2 3]
a = np.array([1,2,3],dtype=str)
 print(a)
['1' '2' '3']
a = np.array([1,2,3],dtype=bool)
print(a)
[ True  True  True]
</code></pre>

<h2>ndarray 对象由计算机内存中的一维连续区域组成，带有将每个元素映射到内存块中某个位置的索引方案。 内存块以按行(C 风格)或按列(FORTRAN 或 MatLab 风格)的方式保存元素。</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python_numpy介绍与安装]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy1/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_numpy1</id>
    <content type="html"><![CDATA[<h1>NumPy</h1>

<hr />

<h2>NumPy - 简介</h2>

<h4>NumPy 是一个 Python 包。 它代表 “Numeric Python”。 它是一个由<code>多维数组对象和用于处理数组的例程集合组成的库</code>。</h4>

<hr />

<h2>NumPy 操作</h2>

<h4>使用NumPy，开发人员可以执行以下操作：</h4>

<ul>
<li><p>数组的算数和逻辑运算。</p></li>
<li><p>傅立叶变换和用于图形操作的例程。</p></li>
<li><p>与线性代数有关的操作。 NumPy 拥有线性代数和随机数生成的内置函数。</p></li>
</ul>


<hr />

<h2>NumPy环境安装配置</h2>

<h4>NumPy - 环境</h4>

<h4>启用 NumPy 的最佳方法是使用特定于您的操作系统的可安装的二进制包。 这些二进制包含完整的 SciPy 技术栈(包括 NumPy，SciPy，matplotlib，IPython，SymPy 以及 Python 核心自带的其它包)。</h4>

<h5>window安装</h5>

<pre><code>pip install numpy
</code></pre>

<h5>linux 安装</h5>

<pre><code>sudo apt-get install python-numpy 
</code></pre>
]]></content>
  </entry>
  
</feed>
