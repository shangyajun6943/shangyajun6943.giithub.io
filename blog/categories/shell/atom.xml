<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | 夕阳还是很红]]></title>
  <link href="http://shangyajun6943.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://shangyajun6943.github.io/"/>
  <updated>2018-08-16T23:47:42+08:00</updated>
  <id>http://shangyajun6943.github.io/</id>
  <author>
    <name><![CDATA[尚亚军]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash_shell]]></title>
    <link href="http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_bash_sell/"/>
    <updated>2018-07-03T15:11:11+08:00</updated>
    <id>http://shangyajun6943.github.io/blog/2018/07/03/shangyajunblog_bash_sell</id>
    <content type="html"><![CDATA[<hr />

<h1>1.bash shell 的概述</h1>

<h2>1. 什么是bash？</h2>

<h5>bash是Bourne Again Shell的简称，是从unix系统中的sh发展而来，是用户和Linux内核交互的工具，用户通过bash操作内核完成系统的使用和管理</h5>

<h2>2.shell的种类</h2>

<h5>/bin/sh(已经被/bin/bash替代)</h5>

<h5>/bin/bash（默认的shell）</h5>

<h5>/bin/ksh(贝尔实验室开发，兼容bash)</h5>

<h5>/bin/tcsh（整合C shell，功能更为强大）</h5>

<h5>/bin/csh(已经被tcsh取代)</h5>

<h5>/bin/zsh（源自ksh功能更为强大）</h5>

<h5>其实每种shell的功能比较类似，都是方便用户使用linux内核，向内核发出指令，但是语法稍有不同。</h5>

<h2>3. bash的历史和发展</h2>

<p><img src="/images/shell/shell1.png" alt="image" /></p>

<hr />

<h1>2.bash shell 的配置</h1>

<h2>1.bash shell 的变量</h2>

<h5>变量就是代表一些值的符号</h5>

<ul>
<li>可以通过变量来设置shell或者其他程序</li>
<li>变量存在于内存中</li>
<li>Linux有自定义变量（local）和环境变量（environment）</li>
<li>自定义变量和环境变量作用范围不同。</li>
<li>可以使用下列指令查看所有变量</li>
<li>set可以查看所有变量</li>
<li>env只能查看环境变量</li>
</ul>


<h4>bash shell有以下几种设置变量的方式</h4>

<ul>
<li>通过自定义变量量设置
<code>
key=value  设置变量的值
echo $key  查看指定变量的值
key2=test one 错误
key2="test one" 成功
key2='test two' 也可以
key3="$key2 three" 成功
key3='$key2 three' 不能显示key2的值
key=$key1==== 可以
变量名不能以特殊字符/数字开头
uset key 删除变量
</code></li>
<li>常见的变量
<code>
HISTFILESIZE：记录历史指令保存的最大值
COLUMNS:终端窗口显示额宽度
LINES：终端窗口显示的高度
PS1：设置提示符号前面的内容样式（\d,\h,\t,\u,\w,\!,\$,\l）。
</code></li>
<li>通过别名（Aliases）设置
<code>
alias cls=clear
type cls
alias 可以查看所有的别名
alias cls 查看别名
type -a alias名称 查看别名
unalias 删除别名
</code></li>
<li>通过set指令设置
<code>
设置shell内部的属性值（set -o noclobber,set -o vi）
重定向输出结果会覆盖里面的内容
touch test
ll &gt;list
vim list
cal &gt;list
vim list
set -o noclobber
cal &gt;list 报错
cal &gt;&gt;list 追加
</code></li>
<li>通过环境变量设置</li>
<li>自定义变量只能在当前的shell环境中有效</li>
<li>环境变量会在整个主机下的shell环境中生效。</li>
<li>使用$export[variable name]来设置自定义变量成环境变量
<code>
HOME:指向当前用户的家目录
LANG:语言，编码（可以解决乱码）
PWD:指向当前的路径
</code></li>
<li>PATH环境变量：</li>
<li>系统预设的环境变量</li>
<li>执行一些没有制定路径的指令时回去该路径中找</li>
<li>修改PATH=$PATH:路径，带来安全问题

<ul>
<li>找命令的路径 which ls</li>
</ul>
</li>
</ul>


<hr />

<h1>3.shell startup scripts的学习</h1>

<h2>1.shell startup scripts概述</h2>

<h4>用户登录或其他用户非登录动作时会自动执行的一些shell脚本：</h4>

<ul>
<li>建立自定义变量或者这行set指令设置shell</li>
<li>建立环境变量，设置其他程序</li>
<li>使用alias，简化后续的操作</li>
<li>登录的时候执行那些程序</li>
<li>分为login和non-login脚本</li>
</ul>


<h4>login  shell脚本</h4>

<ul>
<li>通过完整的登录流程运行的shell命令</li>
<li>首先会读取/etc/profile(PATH/USER/HOSTNAME/HISTSIZE等)</li>
<li>然后读取/etc/profile.d/*.sh 下的所有的.sh脚本（颜色，语言，指令别名等）</li>
</ul>


<h2>2.login和non-login shell的学习</h2>

<hr />

<h1>4.数据流重定向和管道命令</h1>
]]></content>
  </entry>
  
</feed>
